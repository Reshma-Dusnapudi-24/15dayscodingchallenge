1)search-insert-position

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        n=len(nums)
        for i in range(n):
            if nums[i]==target:
                return i
            elif nums[i]>target:
                return i
        return n

2)two-sum-ii-input-array-is-sorted

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        l=0
        r=len(numbers)-1
        while l<r:
            currsum=numbers[l]+numbers[r]
            if currsum<target:
                l+=1
            elif currsum>target:
                r-=1
            else:
                return(l+1,r+1)
        return[]

        

3)longest-substring-without-repeating-characters

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        uniset=set()
        n=len(s)
        ans=0
        l=0
        for r in range(n):
            ch=s[r]
            if ch not in uniset:
                uniset.add(ch)
            else:
                while ch in uniset:
                    uniset.remove(s[l])
                    l+=1
                uniset.add(ch)
            ans=max(ans,r-l+1)
        return ans

            
        
        
